Once you have completed your implementation, review and respond to the questions below. Each of your responses should be at least four sentences.

----- Question 1 -----

What kinds of faults can your peer-to-peer chat implementation tolerate? Faults may include problems with machines or the network, as well as program crashes. Be specific about what failure situations you could tolerate, and explain how the system can continue to work in the face of these failures.

---- Response ----

Some faults our implementation could tolerate would be if a machine a peer is on crashes or if a peer manually diconnects. In this case
our implemention would cut off that peer and the peers that are utilizing the cut off peer's server to connect to the chatroom. 
This is unlike a server-client implementation that will cease functioning when a server closes connection and in this case the clients that are not only
connected to the preiousl disconnected client are still apart of the chat networ.Another fault that
our immplementation can tolerate is packet losses. Because we are utilizing the sockets api, we are able to utilize an unreliable 
communication layer. 

---- Question 2 ----

What faults will cause your peer-to-peer chat to fail, or to operate in some diminished capacity? Again, be specific about the situations that will result in failure.

---- Response ----

The peer-to-peer chat will be less effective if there is a large number of people joining the chat. This is because poll reads
linearly, which makes it such that once there gets to be a large number of peers that must be checked and run through, it struggles
to get through all of them quickly. Another factor that could make this peer-to-peer chat diminish in effectiveness is if a malicious 
user began to spam messages of great length repeatedly. Because the peer-to-peer implementation has a decentralized system, no one 
would be able to do anything to the malicious user and will only be able to leave and create a new chat network. 

---- Question 3 ----

One mechanism for tolerating failure is replication. If each client connected to two existing peers instead of just one, would that help you tolerate any additional faults? 
What problems could this change create for your implementation?

---- Response ----
This could help tolerate the fault of a machine failing when it is acting as the server for some peers. When one peer fails,
the other peer that's acting as the server could take over and let the peers that were connected stay connected to the chat. However,
this could create a few problems for the implementations. For one, we would have to specify which peer to take the input from, as the
peer would take in the same exact inputs from both servers simultaneously otherwise. Following this train of thought, we would need
make sure the peer doesnt send it's message to two different servers when sending as that may cause an avalanche of duplicate messages.
All in all, the connections having two peer connections would make the connection web a lot more complilcated to navigate. One 
implementation we can think of which may work would involve simply keeping a port and name of the client in backup storage and only 
utilizing it when it recognizes that the peer it was connected to has left the connection, which would involve some shuffling around 
and maintenance.



---- Question 4 ----

Describe one additional change you could make to the peer-to-peer chat system that would allow it to tolerate faults. Describe how you would implement this change, and at least one example of how it would allow you to tolerate a fault.

---- Response ----

A change we could make to this implementation would be to introduce libevent, a event based function. This implementation would replace
the poll() loop in managing peers by calling event_dispatch() in place of it. This would erase or significantly decrease the problem 
of the implementation becoming slow with the addition of many peers because libevent is a dynamic callback function that returns when
an event occurs on a file descriptor or a timeout occurs. This would mean that the function wouldn't have to go through everything
linearly, and instead simply get file descriptors when an event occurs.  



